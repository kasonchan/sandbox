import asyncio

from grpclib.utils import graceful_exit
from grpclib.server import Server, Stream

# generated by protoc
from helloworld_pb2 import Request, Response
from helloworld_grpc import ServiceBase


class Greeter(ServiceBase):

    async def SayHello(self, stream: Stream[Request, Response]) -> None:
        request = await stream.recv_message()
        assert request is not None
        message = f'Hello, testing {request.name}!'
        await stream.send_message(Response(message=message))


async def main(*, host: str = '127.0.0.1', port: int = 50051) -> None:
    server = Server([Greeter()])
    # Note: graceful_exit isn't supported in Windows
    with graceful_exit([server]):
        await server.start(host, port)
        print(f'Serving on {host}:{port}')
        await server.wait_closed()


if __name__ == '__main__':
    asyncio.run(main())